// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Trakk.WebApi.DatabaseModels.Models;

#nullable disable

namespace Trakk.WebApi.DatabaseModels.Migrations
{
    [DbContext(typeof(TrakkDbContext))]
    [Migration("20230621093049_newFuelTypeHvo100")]
    partial class newFuelTypeHvo100
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("CategoryAssetMap", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "AssetId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "AssetId" }, "FK_CategoryAssetMap_Asset");

                    b.ToTable("CategoryAssetMap", (string)null);
                });

            modelBuilder.Entity("CategoryTrakkerMap", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("TrakkerId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "TrakkerId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "TrakkerId" }, "FK_CategoryTrakkerMap_Trakker");

                    b.ToTable("CategoryTrakkerMap", (string)null);
                });

            modelBuilder.Entity("CategoryVehicleMap", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "VehicleId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "VehicleId" }, "FK_CategoryVehicleMap_Vehicle");

                    b.ToTable("CategoryVehicleMap", (string)null);
                });

            modelBuilder.Entity("ContactGroupMap", b =>
                {
                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("ContactId", "GroupId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "GroupId" }, "FK_ContactGroupMap_Group");

                    b.ToTable("ContactGroupMap", (string)null);
                });

            modelBuilder.Entity("CustomerCustomerFeature", b =>
                {
                    b.Property<int>("CustomerFeaturesId")
                        .HasColumnType("int");

                    b.Property<int>("CustomersCustomerId")
                        .HasColumnType("int");

                    b.HasKey("CustomerFeaturesId", "CustomersCustomerId");

                    b.HasIndex("CustomersCustomerId");

                    b.ToTable("CustomerFeatureMaps", (string)null);
                });

            modelBuilder.Entity("CustomerFeatureRightType", b =>
                {
                    b.Property<int>("AccountRightsRightTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerFeaturesId")
                        .HasColumnType("int");

                    b.HasKey("AccountRightsRightTypeId", "CustomerFeaturesId");

                    b.HasIndex("CustomerFeaturesId");

                    b.ToTable("CustomerFeatureRightMaps", (string)null);

                    b.HasData(
                        new
                        {
                            AccountRightsRightTypeId = 11,
                            CustomerFeaturesId = 1
                        });
                });

            modelBuilder.Entity("GeofenceContactMap", b =>
                {
                    b.Property<int>("GeofenceId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.HasKey("GeofenceId", "ContactId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ContactId" }, "FK_GeofenceContactMap_Contact");

                    b.ToTable("GeofenceContactMap", (string)null);
                });

            modelBuilder.Entity("GeofenceGroupMap", b =>
                {
                    b.Property<int>("GeofenceId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("GeofenceId", "GroupId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "GroupId" }, "FK_GeofenceGroupMap_Group");

                    b.ToTable("GeofenceGroupMap", (string)null);
                });

            modelBuilder.Entity("GeofenceTrakkerMap", b =>
                {
                    b.Property<int>("GeofenceId")
                        .HasColumnType("int");

                    b.Property<int>("TrakkerId")
                        .HasColumnType("int");

                    b.HasKey("GeofenceId", "TrakkerId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "TrakkerId" }, "FK_GeofenceTrakkerMap_Trakker");

                    b.ToTable("GeofenceTrakkerMap", (string)null);
                });

            modelBuilder.Entity("JobAssetMap", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.HasKey("JobId", "AssetId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "AssetId" }, "FK_JobAssetMap_Asset");

                    b.ToTable("JobAssetMap", (string)null);
                });

            modelBuilder.Entity("JobContactMap", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.HasKey("JobId", "ContactId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ContactId" }, "FK_JobContactMap_Contact");

                    b.ToTable("JobContactMap", (string)null);
                });

            modelBuilder.Entity("JobGroupMap", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("JobId", "GroupId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "GroupId" }, "FK_JobGroupMap_Group");

                    b.ToTable("JobGroupMap", (string)null);
                });

            modelBuilder.Entity("JobTrakkerMap", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("TrakkerId")
                        .HasColumnType("int");

                    b.HasKey("JobId", "TrakkerId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "TrakkerId" }, "FK_JobTrakkerMap_Trakker");

                    b.ToTable("JobTrakkerMap", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountRoleId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<Guid>("Guid")
                        .HasMaxLength(38)
                        .HasColumnType("char(38)")
                        .HasColumnName("GUID")
                        .IsFixedLength();

                    b.Property<decimal?>("HomeLatitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal?>("HomeLongitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.Property<int>("IconSizePixels")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'32'");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsLockedOut")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LoginName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordEncrypted")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SpeedUnit")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValueSql("'kmh'");

                    b.Property<string>("TimeZoneId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasDefaultValueSql("'UTC'");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ValidUntil")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.HasKey("AccountId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ContactId" }, "FK_Account_Contact");

                    b.HasIndex(new[] { "CustomerId" }, "FK_Account_Customer");

                    b.HasIndex(new[] { "LanguageId" }, "FK_Account_Language");

                    b.HasIndex(new[] { "AccountRoleId" }, "FK_Account_UserRole");

                    b.HasIndex(new[] { "Email" }, "IX_Account_Email_NullableUnique")
                        .IsUnique()
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 255 });

                    b.HasIndex(new[] { "LoginName" }, "UQ_Account_LoginName")
                        .IsUnique()
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 255 });

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.AccountConfirmation", b =>
                {
                    b.Property<Guid>("AccountConfirmationId")
                        .HasMaxLength(38)
                        .HasColumnType("char(38)")
                        .IsFixedLength();

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.HasKey("AccountConfirmationId", "AccountId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "AccountId" }, "FK_AccountConfirmation_Account");

                    b.ToTable("AccountConfirmation", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.AccountEvent", b =>
                {
                    b.Property<int>("AccountEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountEventTypeId")
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EventData")
                        .HasColumnType("text");

                    b.HasKey("AccountEventId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AccountId" }, "FK_AccountEvent_Account");

                    b.HasIndex(new[] { "AccountEventTypeId" }, "FK_AccountEvent_EventType");

                    b.ToTable("AccountEvent", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.AccountEventType", b =>
                {
                    b.Property<int>("AccountEventTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AccountEventTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("AccountEventType", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.AccountGroupMap", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("Access")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPersonal")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("AccountId", "GroupId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "GroupId" }, "FK_AccountGroupMap_Group");

                    b.ToTable("AccountGroupMap", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.AccountRightMap", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("RightTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<DateTime?>("ValidUntil")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ValueData")
                        .HasColumnType("text");

                    b.HasKey("AccountId", "RightTypeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "RightTypeId" }, "FK_AccountRightTypeMap_RightType");

                    b.ToTable("AccountRightMap", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.AccountRole", b =>
                {
                    b.Property<int>("AccountRoleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AccountRoleId")
                        .HasName("PRIMARY");

                    b.ToTable("AccountRole", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.AccountToken", b =>
                {
                    b.Property<int>("AccountTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<Guid>("TokenGuid")
                        .HasMaxLength(38)
                        .HasColumnType("char(38)")
                        .IsFixedLength();

                    b.HasKey("AccountTokenId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TokenGuid" }, "UQ_AccountToken_TokenGuid")
                        .IsUnique();

                    b.ToTable("AccountToken", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.AccountTrakkerMap", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("TrakkerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("AccountId", "TrakkerId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "TrakkerId" }, "FK_AccountTrakkerMap_Trakker");

                    b.ToTable("AccountTrakkerMap", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.ActiveAlert", b =>
                {
                    b.Property<int>("ActiveAlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("GeofenceEventId")
                        .HasColumnType("int");

                    b.Property<int>("TrakkerEventId")
                        .HasColumnType("int");

                    b.HasKey("ActiveAlertId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GeofenceEventId" }, "FK_ActiveAlert_GeofenceEvent");

                    b.HasIndex(new[] { "TrakkerEventId" }, "UK_ActiveAlert_TrakkerEventId")
                        .IsUnique();

                    b.ToTable("ActiveAlert", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Agreement", b =>
                {
                    b.Property<int>("AgreementId")
                        .HasColumnType("int");

                    b.Property<string>("AgreementNumber")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("Finance")
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ValidTo")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.HasKey("AgreementId")
                        .HasName("PRIMARY");

                    b.ToTable("Agreement", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.ArchivedUnitsCustomer", b =>
                {
                    b.Property<int>("ArchivedUnitsCustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CustomerAdminId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("ArchivedUnitsCustomerId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerId" }, "FK_ArchivedUnitsCustomer_Customer");

                    b.HasIndex(new[] { "CustomerAdminId" }, "IX_ArchivedUnitsCustomer_CustomerAdminId_NullableUnique")
                        .IsUnique();

                    b.ToTable("ArchivedUnitsCustomer", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Asset", b =>
                {
                    b.Property<int>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double?>("Co2ByMin")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("current_timestamp(6)");

                    b.Property<int?>("LatestAssetEventId")
                        .HasColumnType("int");

                    b.Property<int>("OperationTimeCounter")
                        .HasColumnType("int");

                    b.Property<int>("SecondsStillUntilStop")
                        .HasColumnType("int");

                    b.Property<int>("TrakkerId")
                        .HasColumnType("int");

                    b.HasKey("AssetId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "LatestAssetEventId" }, "FK_Asset_LatestAssetEvent");

                    b.HasIndex(new[] { "TrakkerId" }, "FK_Asset_Trakker");

                    b.ToTable("Asset", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.AssetEvent", b =>
                {
                    b.Property<int>("AssetEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssetEventTypeId")
                        .HasColumnType("int");

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("GeofenceName")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PositionOn")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<long>("PrivateOperationTime")
                        .HasColumnType("bigint(20)");

                    b.Property<DateTime>("StartDateTime")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("StopDateTime")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<long>("WorkOperationTime")
                        .HasColumnType("bigint(20)");

                    b.HasKey("AssetEventId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PositionId" }, "FK_AssetEvent_Position");

                    b.HasIndex(new[] { "AssetId", "AssetEventTypeId", "StartDateTime", "StopDateTime", "AssetEventId", "PositionId", "GeofenceName", "Comment" }, "IX_AssetEvent_AssetId_AssetTypeId_Start_Stop");

                    b.ToTable("AssetEvent", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.BaseStation", b =>
                {
                    b.Property<int>("BaseStationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("IdetityCode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasDefaultValueSql("'MCC + MNC + LAC + CELLID'");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.HasKey("BaseStationId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PositionId" }, "FK_BaseStation_Position");

                    b.ToTable("BaseStation", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("CategoryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CategoryTypeId" }, "FK_CategoryType");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.CategoryType", b =>
                {
                    b.Property<int>("CategoryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("CategoryTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("CategoryType", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.ChangeEmailTicket", b =>
                {
                    b.Property<int>("ChangeEmailTicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NewEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("OldEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("ValidUntil")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("current_timestamp(6)");

                    b.Property<Guid>("Verification")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38)
                        .HasColumnType("char(38)")
                        .HasDefaultValueSql("(uuid())")
                        .IsFixedLength();

                    b.HasKey("ChangeEmailTicketId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AccountId" }, "FK_ChangeEmailTicket_Account");

                    b.HasIndex(new[] { "Verification" }, "IX_ChangeEmailTicket_Verification");

                    b.ToTable("ChangeEmailTicket", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.CommunicationEvent", b =>
                {
                    b.Property<int>("CommunicationEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("CommunicationEventTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsSent")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Receiver")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Sender")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Subject")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("CommunicationEventId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AccountId" }, "FK_CommunicationEvent_Account");

                    b.HasIndex(new[] { "CommunicationEventTypeId" }, "FK_CommunicationEvent_CommunicationEventType");

                    b.ToTable("CommunicationEvent", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.CommunicationEventType", b =>
                {
                    b.Property<int>("CommunicationEventTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CommunicationEventTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("CommunicationEventType", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.CongestionTaxV2.CongestionTaxData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("CongestionTaxDatas");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.CongestionTaxV2.Passage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Area")
                        .HasColumnType("int");

                    b.Property<int?>("BorderCrossingId")
                        .HasColumnType("int");

                    b.Property<int?>("CongestionTaxDataId")
                        .HasColumnType("int");

                    b.Property<double>("Cost")
                        .HasColumnType("double");

                    b.Property<DateTime>("PassageTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TaxBorder")
                        .HasColumnType("int");

                    b.Property<int>("VehicleEventId")
                        .HasColumnType("int");

                    b.Property<bool>("ViaEssingeleden")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("CongestionTaxDataId");

                    b.HasIndex("VehicleEventId");

                    b.ToTable("Passage");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AlertTypes")
                        .HasColumnType("text");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ContactId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerId" }, "FK_Contact_Customer");

                    b.ToTable("Contact", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("current_timestamp(6)");

                    b.Property<int?>("CustomerAdminId")
                        .HasColumnType("int");

                    b.Property<string>("Information")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("SalesPersonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("CustomerId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerAdminId" }, "FK_Customer_CustomerAdminId");

                    b.HasIndex(new[] { "SalesPersonId" }, "IX_Customer_SalesPersonId");

                    b.HasIndex(new[] { "Name" }, "UK_Customer_Name")
                        .IsUnique();

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.CustomerAdmin", b =>
                {
                    b.Property<int>("CustomerAdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CanRegisterHardware")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ContactPhoneNumber")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("CustomerAdminId")
                        .HasName("PRIMARY");

                    b.ToTable("CustomerAdmin", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.CustomerFeature", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CustomerFeatures");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.CustomerFuelPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<double>("Diesel")
                        .HasColumnType("double");

                    b.Property<double>("E85")
                        .HasColumnType("double");

                    b.Property<double>("Electric")
                        .HasColumnType("double");

                    b.Property<double>("Gas")
                        .HasColumnType("double");

                    b.Property<double>("Hvo100")
                        .HasColumnType("double");

                    b.Property<double>("Petrol")
                        .HasColumnType("double");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerId" }, "IX_CustomerFuelPrices_CustomerId");

                    b.ToTable("CustomerFuelPrices");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.CustomerServiceMap", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<DateTime?>("ValidUntil")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ValueData")
                        .HasColumnType("text");

                    b.HasKey("CustomerId", "ServiceId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex("ServiceId");

                    b.ToTable("CustomerServiceMap", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.DbSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsIntegrationTestDb")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsIntegrationTestDB");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("DBSettings", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("current_timestamp(6)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("DriverId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AccountId" }, "FK_Driver_AccountId");

                    b.HasIndex(new[] { "CustomerId" }, "FK_Driver_Customer");

                    b.ToTable("Driver", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.DriverEvent", b =>
                {
                    b.Property<int>("DriverEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("current_timestamp(6)");

                    b.Property<int>("DriverEventTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("EventData")
                        .HasColumnType("text");

                    b.HasKey("DriverEventId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DriverId" }, "FK_DriverEvent_Driver");

                    b.HasIndex(new[] { "DriverEventTypeId" }, "FK_DriverEvent_DriverEventType");

                    b.ToTable("DriverEvent", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.DriverEventType", b =>
                {
                    b.Property<int>("DriverEventTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DriverEventTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("DriverEventType", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.DriverSetting", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("WorkEndFriday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("WorkEndMonday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("WorkEndSaturday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("WorkEndSunday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("WorkEndThursday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("WorkEndTuesday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("WorkEndWednesday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("WorkStartFriday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("WorkStartMonday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("WorkStartSaturday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("WorkStartSunday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("WorkStartThursday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("WorkStartTuesday")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("WorkStartWednesday")
                        .HasColumnType("time");

                    b.HasKey("AccountId")
                        .HasName("PRIMARY");

                    b.ToTable("DriverSettings");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.ErrorLog", b =>
                {
                    b.Property<int>("ErrorLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("current_timestamp(6)");

                    b.Property<string>("Http")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("StackTrace")
                        .HasColumnType("text");

                    b.HasKey("ErrorLogId")
                        .HasName("PRIMARY");

                    b.ToTable("ErrorLog", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.ExternalAccessMap", b =>
                {
                    b.Property<int>("ExternalCustomerId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("ExternalCustomerId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("ExternalAccessMaps");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Extras", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Extras");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.GeocodedPosition", b =>
                {
                    b.Property<int>("GeocodedPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Country")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("current_timestamp(6)");

                    b.Property<string>("HouseNumber")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Label")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(7, 4)
                        .HasColumnType("decimal(7,4)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(7, 4)
                        .HasColumnType("decimal(7,4)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Street")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("GeocodedPositionId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Latitude", "Longitude" }, "IX_GeocodedPosition_Latitude_Longitude");

                    b.ToTable("GeocodedPosition", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Geofence", b =>
                {
                    b.Property<int>("GeofenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("ActiveForAllUnits")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("BufferRadius")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("GeofenceTypeId")
                        .HasColumnType("int");

                    b.Property<Geometry>("Geography")
                        .IsRequired()
                        .HasColumnType("geography")
                        .HasColumnName("Geography");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<bool>("IsTimeControlled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("TimezoneId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasDefaultValueSql("'UTC'");

                    b.HasKey("GeofenceId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerId" }, "FK_Geofence_Customer");

                    b.HasIndex(new[] { "GeofenceTypeId" }, "FK_Geofence_GeofenceType");

                    b.HasIndex(new[] { "ScheduleId" }, "IX_Geofence_ScheduleId");

                    b.ToTable("Geofence", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.GeofenceEvent", b =>
                {
                    b.Property<int>("GeofenceEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("EnteredOn")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GeofenceId")
                        .HasColumnType("int");

                    b.Property<string>("GeofenceName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("LeftOn")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TrakkerId")
                        .HasColumnType("int");

                    b.HasKey("GeofenceEventId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GeofenceId" }, "FK_TriggeredGeofenceTrakkerMap_Geofence");

                    b.HasIndex(new[] { "TrakkerId" }, "FK_TriggeredGeofenceTrakkerMap_Trakker");

                    b.ToTable("GeofenceEvent", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.GeofenceType", b =>
                {
                    b.Property<int>("GeofenceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("GeofenceTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("GeofenceType", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("GroupId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerId" }, "FK_Group_Customer");

                    b.ToTable("Group", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Hardware", b =>
                {
                    b.Property<int>("HardwareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BillingType")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("current_timestamp(6)");

                    b.Property<int?>("CustomerAdminId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("FinancePartner")
                        .HasColumnType("int");

                    b.Property<string>("GlobalDeviceId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("HardwareConfigId")
                        .HasColumnType("int");

                    b.Property<int>("HardwareStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("HardwareTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Icc")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ICC");

                    b.Property<int>("OffGridThresholdSeconds")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'604800'");

                    b.Property<DateTime?>("SentToCustomer")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.HasKey("HardwareId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerAdminId" }, "FK_Hardware_CustomerAdmin");

                    b.HasIndex(new[] { "HardwareConfigId" }, "FK_Hardware_HardwareConfig");

                    b.HasIndex(new[] { "HardwareStatusId" }, "FK_Hardware_HardwareStatus");

                    b.HasIndex(new[] { "HardwareTypeId" }, "FK_Hardware_HardwareType");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Hardware_CustomerId");

                    b.HasIndex(new[] { "Icc" }, "IX_Hardware_ICC_NullableUnique")
                        .IsUnique();

                    b.HasIndex(new[] { "GlobalDeviceId" }, "UK_Hardware_GlobalDeviceId")
                        .IsUnique();

                    b.ToTable("Hardware", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.HardwareConfig", b =>
                {
                    b.Property<int>("HardwareConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IconId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("SecondsStillUntilStop")
                        .HasColumnType("int");

                    b.Property<int?>("VibrationSensitivity")
                        .HasColumnType("int");

                    b.HasKey("HardwareConfigId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IconId" }, "FK_HardwareConfig_Icon");

                    b.ToTable("HardwareConfig", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.HardwareStatus", b =>
                {
                    b.Property<int>("HardwareStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("HardwareStatusId")
                        .HasName("PRIMARY");

                    b.ToTable("HardwareStatus", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.HardwareType", b =>
                {
                    b.Property<int>("HardwareTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("HasExternalBattery")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasSimCardSlot")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Url")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.HasKey("HardwareTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("HardwareType", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Icon", b =>
                {
                    b.Property<int>("IconId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("IconId")
                        .HasName("PRIMARY");

                    b.ToTable("Icon", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.IsaEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("MaxSpeed")
                        .HasColumnType("double");

                    b.Property<double>("SpeedLimit")
                        .HasColumnType("double");

                    b.Property<int>("VehicleEventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleEventId");

                    b.HasIndex("VehicleEventId", "Id");

                    b.ToTable("IsaEvents");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("ArgumentType")
                        .HasColumnType("text");

                    b.Property<string>("Arguments")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("current_timestamp(6)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("JobIntervalTypeId")
                        .HasColumnType("int");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("NextOccurrence")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("OdometerMeter")
                        .HasColumnType("int");

                    b.Property<decimal?>("OperationTimeHours")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("JobId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerId" }, "FK_Job_Customer");

                    b.HasIndex(new[] { "JobIntervalTypeId" }, "FK_Job_JobIntervalType");

                    b.HasIndex(new[] { "JobTypeId" }, "FK_Job_JobType");

                    b.HasIndex(new[] { "AccountId" }, "IX_Job_AccountId");

                    b.ToTable("Job", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.JobEmailAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("EmailAddresses");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.JobIntervalType", b =>
                {
                    b.Property<int>("JobIntervalTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("JobIntervalTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("JobIntervalType", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.JobType", b =>
                {
                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("JobTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("JobType", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("LanguageId")
                        .HasName("PRIMARY");

                    b.ToTable("Language", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Mapzone", b =>
                {
                    b.Property<int>("MapzoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ZoomLevel")
                        .HasColumnType("int");

                    b.HasKey("MapzoneId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerId" }, "FK_Mapzone_Customer");

                    b.ToTable("Mapzone", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.PasswordRecovery", b =>
                {
                    b.Property<Guid>("PasswordRecoveryId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(38)
                        .HasColumnType("char(38)")
                        .IsFixedLength();

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ValidUntil")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.HasKey("PasswordRecoveryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AccountId" }, "FK_PasswordRecovery_AccountId");

                    b.ToTable("PasswordRecovery", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("current_timestamp(6)");

                    b.Property<int?>("GeocodedPositionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.HasKey("PositionId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GeocodedPositionId" }, "FK_GeocodedPosition");

                    b.HasIndex(new[] { "Latitude", "Longitude", "PositionId", "CreatedOn", "GeocodedPositionId" }, "IX_Position_Lat_Lon");

                    b.ToTable("Position", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.RightType", b =>
                {
                    b.Property<int>("RightTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RightTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("RightType", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.RootAccount", b =>
                {
                    b.Property<int>("RootAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CustomerAdminId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("RootAccountTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("RootAccountId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerAdminId" }, "FK_RootAccount_CustomerAdmin");

                    b.HasIndex(new[] { "RootAccountTypeId" }, "FK_RootAccount_RootAccountType");

                    b.HasIndex(new[] { "UserName" }, "UQ_RootAccount_UserName")
                        .IsUnique();

                    b.ToTable("RootAccount", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.RootAccountType", b =>
                {
                    b.Property<int>("RootAccountTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RootAccountTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("RootAccountType", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Route", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("RouteHandle")
                        .HasColumnType("text");

                    b.HasKey("RouteId")
                        .HasName("PRIMARY");

                    b.ToTable("Route", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.RouteSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Duration")
                        .HasColumnType("double");

                    b.Property<DateTime>("From")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Length")
                        .HasColumnType("double");

                    b.Property<Geometry>("Path")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.Property<int?>("StartReferencePositionId")
                        .HasColumnType("int");

                    b.Property<int?>("StopReferencePositionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("To")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RouteId" }, "IX_RouteSections_RouteId");

                    b.HasIndex(new[] { "StartReferencePositionId" }, "IX_RouteSections_StartReferencePositionId");

                    b.HasIndex(new[] { "StopReferencePositionId" }, "IX_RouteSections_StopReferencePositionId");

                    b.ToTable("RouteSections");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.SalesPerson", b =>
                {
                    b.Property<int>("SalesPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CustomerAdminId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("SalesPersonId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerAdminId" }, "IX_SalesPerson_CustomerAdminId");

                    b.HasIndex(new[] { "Name", "CustomerAdminId" }, "IX_SalesPerson_Name_CustomerAdminId")
                        .IsUnique()
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 255, 0 });

                    b.ToTable("SalesPerson", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ServiceId")
                        .HasName("PRIMARY");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.SmsCommand", b =>
                {
                    b.Property<int>("SmsCommandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Command")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("HardwareTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("SmsCommandId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "HardwareTypeId" }, "FK_SmsCommand_HardwareType");

                    b.ToTable("SmsCommand", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.SmsOperator", b =>
                {
                    b.Property<int>("SmsOperatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apn")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("User")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("SmsOperatorId")
                        .HasName("PRIMARY");

                    b.ToTable("SmsOperator", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Trakker", b =>
                {
                    b.Property<int>("TrakkerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte?>("BatteryStatus")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<string>("BusinessArea")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CostCenter")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("current_timestamp(6)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentNumber")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("HardwareId")
                        .HasColumnType("int");

                    b.Property<int>("IconId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'42'");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastContact")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LatestEventId")
                        .HasColumnType("int");

                    b.Property<int?>("LatestPositionEventId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("TrakkerId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerId" }, "FK_Trakker_Customer");

                    b.HasIndex(new[] { "HardwareId" }, "FK_Trakker_Hardware");

                    b.HasIndex(new[] { "IconId" }, "FK_Trakker_Icon");

                    b.HasIndex(new[] { "LatestEventId" }, "FK_Trakker_LatestEventId");

                    b.HasIndex(new[] { "LatestPositionEventId" }, "FK_Trakker_LatestPositionEventId");

                    b.HasIndex(new[] { "ScheduleId" }, "IX_Trakker_ScheduleId");

                    b.ToTable("Trakker", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.TrakkerEvent", b =>
                {
                    b.Property<int>("TrakkerEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte?>("Accuracy")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<int?>("AlertTypeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Altitude")
                        .HasPrecision(8, 1)
                        .HasColumnType("decimal(8,1)");

                    b.Property<byte?>("BatteryLevel")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<string>("Comment")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("ExtrasId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Heading")
                        .HasPrecision(8, 1)
                        .HasColumnType("decimal(8,1)");

                    b.Property<bool>("IsAgps")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsAGPS");

                    b.Property<DateTime>("OccuredOn")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("current_timestamp(6)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Speed")
                        .HasPrecision(8, 1)
                        .HasColumnType("decimal(8,1)");

                    b.Property<int?>("Temperature")
                        .HasColumnType("int");

                    b.Property<int>("TrakkerEventTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TrakkerId")
                        .HasColumnType("int");

                    b.HasKey("TrakkerEventId")
                        .HasName("PRIMARY");

                    b.HasIndex("ExtrasId")
                        .IsUnique();

                    b.HasIndex(new[] { "PositionId" }, "FK_TrakkerEvent_Position");

                    b.HasIndex(new[] { "TrakkerId" }, "IX_TrakkerEvent_TrakkerId");

                    b.ToTable("TrakkerEvent", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.UserEvents.UserEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("UserEvents");

                    b.HasDiscriminator<int>("EventType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("Co2")
                        .HasColumnType("int")
                        .HasColumnName("CO2");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("current_timestamp(6)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Driver")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("''");

                    b.Property<int>("DriverAssignment")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DriverAssignmentValidUntil")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<double>("FuelConsumption")
                        .HasColumnType("double");

                    b.Property<int>("FuelType")
                        .HasColumnType("int");

                    b.Property<bool>("HasCongestionTax")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasExternalRouteSource")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasIsaEventProcessor")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasVehicleEventProcessor")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LatestStopEventId")
                        .HasColumnType("int");

                    b.Property<int?>("LatestTrakkerEventId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("OdometerMeter")
                        .HasColumnType("int");

                    b.Property<string>("TimeZoneId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasDefaultValueSql("'UTC'");

                    b.Property<string>("VehicleRegistrationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Vin")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("VIN");

                    b.HasKey("VehicleId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerId" }, "FK_Vehicle_Customer");

                    b.HasIndex(new[] { "LatestTrakkerEventId" }, "FK_Vehicle_TrakkerEvent");

                    b.HasIndex(new[] { "AccountId" }, "IX_Vehicle_AccountId")
                        .IsUnique();

                    b.HasIndex(new[] { "LatestStopEventId" }, "IX_Vehicle_LatestStopEventId")
                        .IsUnique();

                    b.ToTable("Vehicle", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2.EventPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("IsaEventId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<int>("VehicleEventId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("IsaEventId");

                    b.HasIndex("PositionId", "IsaEventId", "VehicleEventId", "Id");

                    b.HasIndex(new[] { "PositionId" }, "IX_EventPositions_PositionId");

                    b.HasIndex(new[] { "VehicleEventId" }, "IX_EventPositions_VehicleEventId");

                    b.ToTable("EventPositions");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2.VehicleEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<double>("Distance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Driver")
                        .HasColumnType("text");

                    b.Property<bool>("DriverLocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("HardwareType")
                        .HasColumnType("int");

                    b.Property<int?>("OdometerMeter")
                        .HasColumnType("int");

                    b.Property<int>("PositionCount")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousId")
                        .HasColumnType("int");

                    b.Property<bool>("Private")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("RouteId")
                        .HasColumnType("int");

                    b.Property<bool>("SafetyZone")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("StartTime")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<bool>("UserDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Valid")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("Id", "Type", "VehicleId");

                    b.HasIndex(new[] { "AccountId" }, "IX_VehicleEvents_AccountId");

                    b.HasIndex(new[] { "PreviousId" }, "IX_VehicleEvents_PreviousId")
                        .IsUnique();

                    b.HasIndex(new[] { "RouteId" }, "IX_VehicleEvents_RouteId")
                        .IsUnique();

                    b.HasIndex(new[] { "VehicleId" }, "IX_VehicleEvents_VehicleId");

                    b.ToTable("VehicleEvents");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.VehicleReminder", b =>
                {
                    b.Property<int>("VehicleReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsTriggered")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("OdometerBreakpoint")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReminderDate")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<int>("VehicleReminderTypeId")
                        .HasColumnType("int");

                    b.HasKey("VehicleReminderId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "VehicleReminderTypeId" }, "FK_VehicleReminder_Vehicle");

                    b.ToTable("VehicleReminder", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.VehicleReminderType", b =>
                {
                    b.Property<int>("VehicleReminderTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("VehicleReminderTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("VehicleReminderType", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.VehicleSchedule_V2.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("OverrideTime")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TimeZoneInfo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.VehicleSchedule_V2.ScheduleEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActiveDays")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("StopTime")
                        .HasColumnType("time(6)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ScheduleId" }, "IX_ScheduleEntries_ScheduleId");

                    b.ToTable("ScheduleEntries");
                });

            modelBuilder.Entity("TrakkerContactMap", b =>
                {
                    b.Property<int>("TrakkerId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.HasKey("TrakkerId", "ContactId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ContactId" }, "FK_TrakkerContactMap_Contact");

                    b.ToTable("TrakkerContactMap", (string)null);
                });

            modelBuilder.Entity("TrakkerGroupMap", b =>
                {
                    b.Property<int>("TrakkerId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("TrakkerId", "GroupId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "GroupId" }, "FK_TrakkerGroupMap_Group");

                    b.ToTable("TrakkerGroupMap", (string)null);
                });

            modelBuilder.Entity("TrakkerVehicleMap", b =>
                {
                    b.Property<int>("TrakkerId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("TrakkerId", "VehicleId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "VehicleId" }, "FK_TrakkerVehicleMap_Vehicle");

                    b.ToTable("TrakkerVehicleMap", (string)null);
                });

            modelBuilder.Entity("VehicleReminderContactMap", b =>
                {
                    b.Property<int>("VehicleReminderId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.HasKey("VehicleReminderId", "ContactId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ContactId" }, "FK_VehicleReminderContactMap_Contact");

                    b.ToTable("VehicleReminderContactMap", (string)null);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.UserEvents.UpdatePropertiesUserEvent", b =>
                {
                    b.HasBaseType("Trakk.WebApi.DatabaseModels.Models.UserEvents.UserEvent");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TargetId")
                        .HasColumnType("int");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.UserEvents.UserLoginEvent", b =>
                {
                    b.HasBaseType("Trakk.WebApi.DatabaseModels.Models.UserEvents.UserEvent");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2.StopEvent", b =>
                {
                    b.HasBaseType("Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2.VehicleEvent");

                    b.Property<int?>("StopPositionId")
                        .HasColumnType("int");

                    b.HasIndex(new[] { "StopPositionId" }, "IX_VehicleEvents_StopPositionId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2.TripEvent", b =>
                {
                    b.HasBaseType("Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2.VehicleEvent");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2.UserVehicleEvent", b =>
                {
                    b.HasBaseType("Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2.VehicleEvent");

                    b.Property<string>("FromAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ToAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ToDateTime")
                        .HasColumnType("datetime(6)");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2.UserStopEvent", b =>
                {
                    b.HasBaseType("Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2.UserVehicleEvent");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2.UserTripEvent", b =>
                {
                    b.HasBaseType("Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2.UserVehicleEvent");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("CategoryAssetMap", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Asset", null)
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CategoryAssetMap_Asset");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CategoryAssetMap_Category");
                });

            modelBuilder.Entity("CategoryTrakkerMap", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CategoryTrakkerMap_Category");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Trakker", null)
                        .WithMany()
                        .HasForeignKey("TrakkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CategoryTrakkerMap_Trakker");
                });

            modelBuilder.Entity("CategoryVehicleMap", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CategoryVehicleMap_Category");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CategoryVehicleMap_Vehicle");
                });

            modelBuilder.Entity("ContactGroupMap", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Contact", null)
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ContactGroupMap_Contact");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ContactGroupMap_Group");
                });

            modelBuilder.Entity("CustomerCustomerFeature", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.CustomerFeature", null)
                        .WithMany()
                        .HasForeignKey("CustomerFeaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerFeatureRightType", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.RightType", null)
                        .WithMany()
                        .HasForeignKey("AccountRightsRightTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.CustomerFeature", null)
                        .WithMany()
                        .HasForeignKey("CustomerFeaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeofenceContactMap", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Contact", null)
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GeofenceContactMap_Contact");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Geofence", null)
                        .WithMany()
                        .HasForeignKey("GeofenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GeofenceContactMap_Geofence");
                });

            modelBuilder.Entity("GeofenceGroupMap", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Geofence", null)
                        .WithMany()
                        .HasForeignKey("GeofenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GeofenceGroupMap_Geofence");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GeofenceGroupMap_Group");
                });

            modelBuilder.Entity("GeofenceTrakkerMap", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Geofence", null)
                        .WithMany()
                        .HasForeignKey("GeofenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GeofenceTrakkerMap_Geofence");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Trakker", null)
                        .WithMany()
                        .HasForeignKey("TrakkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GeofenceTrakkerMap_Trakker");
                });

            modelBuilder.Entity("JobAssetMap", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Asset", null)
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JobAssetMap_Asset");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Job", null)
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JobAssetMap_Job");
                });

            modelBuilder.Entity("JobContactMap", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Contact", null)
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JobContactMap_Contact");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Job", null)
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JobContactMap_Task");
                });

            modelBuilder.Entity("JobGroupMap", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JobGroupMap_Group");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Job", null)
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JobGroupMap_Job");
                });

            modelBuilder.Entity("JobTrakkerMap", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Job", null)
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JobTrakkerMap_Task");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Trakker", null)
                        .WithMany()
                        .HasForeignKey("TrakkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JobTrakkerMap_Trakker");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Account", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.AccountRole", "AccountRole")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountRoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Account_UserRole");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Contact", "Contact")
                        .WithMany("Accounts")
                        .HasForeignKey("ContactId")
                        .IsRequired()
                        .HasConstraintName("FK_Account_Contact");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Customer", "Customer")
                        .WithMany("Accounts")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Account_Customer");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Language", "Language")
                        .WithMany("Accounts")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("FK_Account_Language");

                    b.Navigation("AccountRole");

                    b.Navigation("Contact");

                    b.Navigation("Customer");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.AccountConfirmation", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Account", "Account")
                        .WithMany("AccountConfirmations")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AccountConfirmation_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.AccountEvent", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.AccountEventType", "AccountEventType")
                        .WithMany("AccountEvents")
                        .HasForeignKey("AccountEventTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountEvent_EventType");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Account", "Account")
                        .WithMany("AccountEvents")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AccountEvent_Account");

                    b.Navigation("Account");

                    b.Navigation("AccountEventType");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.AccountGroupMap", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Account", "Account")
                        .WithMany("AccountGroupMaps")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AccountGroupMap_Account");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Group", "Group")
                        .WithMany("AccountGroupMaps")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AccountGroupMap_Group");

                    b.Navigation("Account");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.AccountRightMap", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Account", "Account")
                        .WithMany("AccountRightMaps")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountRightMap_Account");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.RightType", "RightType")
                        .WithMany("AccountRightMaps")
                        .HasForeignKey("RightTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountRightTypeMap_RightType");

                    b.Navigation("Account");

                    b.Navigation("RightType");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.AccountTrakkerMap", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Account", "Account")
                        .WithMany("AccountTrakkerMaps")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AccountTrakkerMap_Account");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Trakker", "Trakker")
                        .WithMany("AccountTrakkerMaps")
                        .HasForeignKey("TrakkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AccountTrakkerMap_Trakker");

                    b.Navigation("Account");

                    b.Navigation("Trakker");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.ActiveAlert", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.GeofenceEvent", "GeofenceEvent")
                        .WithMany("ActiveAlerts")
                        .HasForeignKey("GeofenceEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ActiveAlert_GeofenceEvent");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.TrakkerEvent", "TrakkerEvent")
                        .WithOne("ActiveAlert")
                        .HasForeignKey("Trakk.WebApi.DatabaseModels.Models.ActiveAlert", "TrakkerEventId")
                        .IsRequired()
                        .HasConstraintName("FK_ActiveAlert_TrakkerEvent");

                    b.Navigation("GeofenceEvent");

                    b.Navigation("TrakkerEvent");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.ArchivedUnitsCustomer", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.CustomerAdmin", "CustomerAdmin")
                        .WithMany("ArchivedUnitsCustomers")
                        .HasForeignKey("CustomerAdminId")
                        .HasConstraintName("FK_ArchivedUnitsCustomer_CustomerAdmin");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Customer", "Customer")
                        .WithMany("ArchivedUnitsCustomers")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_ArchivedUnitsCustomer_Customer");

                    b.Navigation("Customer");

                    b.Navigation("CustomerAdmin");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Asset", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.AssetEvent", "LatestAssetEvent")
                        .WithMany("Assets")
                        .HasForeignKey("LatestAssetEventId")
                        .HasConstraintName("FK_Asset_LatestAssetEvent");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Trakker", "Trakker")
                        .WithMany("Assets")
                        .HasForeignKey("TrakkerId")
                        .IsRequired()
                        .HasConstraintName("FK_Asset_Trakker");

                    b.Navigation("LatestAssetEvent");

                    b.Navigation("Trakker");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.AssetEvent", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Asset", "Asset")
                        .WithMany("AssetEvents")
                        .HasForeignKey("AssetId")
                        .IsRequired()
                        .HasConstraintName("FK_AssetEvent_Asset");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Position", "Position")
                        .WithMany("AssetEvents")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("FK_AssetEvent_Position");

                    b.Navigation("Asset");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.BaseStation", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Position", "Position")
                        .WithMany("BaseStations")
                        .HasForeignKey("PositionId")
                        .IsRequired()
                        .HasConstraintName("FK_BaseStation_Position");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Category", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.CategoryType", "CategoryType")
                        .WithMany("Categories")
                        .HasForeignKey("CategoryTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_CategoryType");

                    b.Navigation("CategoryType");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.ChangeEmailTicket", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Account", "Account")
                        .WithMany("ChangeEmailTickets")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChangeEmailTicket_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.CommunicationEvent", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Account", "Account")
                        .WithMany("CommunicationEvents")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_CommunicationEvent_Account");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.CommunicationEventType", "CommunicationEventType")
                        .WithMany("CommunicationEvents")
                        .HasForeignKey("CommunicationEventTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_CommunicationEvent_CommunicationEventType");

                    b.Navigation("Account");

                    b.Navigation("CommunicationEventType");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.CongestionTaxV2.Passage", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.CongestionTaxV2.CongestionTaxData", null)
                        .WithMany("Passages")
                        .HasForeignKey("CongestionTaxDataId");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2.VehicleEvent", null)
                        .WithMany("CongestionTaxPassages")
                        .HasForeignKey("VehicleEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Contact", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Customer", "Customer")
                        .WithMany("Contacts")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Contact_Customer");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Customer", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.CustomerAdmin", "CustomerAdmin")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerAdminId")
                        .HasConstraintName("FK_Customer_CustomerAdminId");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.SalesPerson", "SalesPerson")
                        .WithMany("Customers")
                        .HasForeignKey("SalesPersonId");

                    b.Navigation("CustomerAdmin");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.CustomerFuelPrice", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Customer", "Customer")
                        .WithMany("FuelTypePrices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.CustomerServiceMap", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Customer", "Customer")
                        .WithMany("CustomerServiceMaps")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerServiceMap_UserAccount");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Service", "Service")
                        .WithMany("CustomerServiceMaps")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerServiceMap_Service");

                    b.Navigation("Customer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Driver", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Account", "Account")
                        .WithMany("Drivers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("FK_Driver_AccountId");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Customer", "Customer")
                        .WithMany("Drivers")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Driver_Customer");

                    b.Navigation("Account");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.DriverEvent", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.DriverEventType", "DriverEventType")
                        .WithMany("DriverEvents")
                        .HasForeignKey("DriverEventTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_DriverEvent_DriverEventType");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Driver", "Driver")
                        .WithMany("DriverEvents")
                        .HasForeignKey("DriverId")
                        .IsRequired()
                        .HasConstraintName("FK_DriverEvent_Driver");

                    b.Navigation("Driver");

                    b.Navigation("DriverEventType");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.DriverSetting", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Account", "Account")
                        .WithOne("DriverSetting")
                        .HasForeignKey("Trakk.WebApi.DatabaseModels.Models.DriverSetting", "AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_DriverSettings_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.ExternalAccessMap", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Customer", "Customer")
                        .WithMany("ExternalAccessMaps")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Geofence", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Customer", "Customer")
                        .WithMany("Geofences")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Geofence_Customer");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.GeofenceType", "GeofenceType")
                        .WithMany("Geofences")
                        .HasForeignKey("GeofenceTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Geofence_GeofenceType");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.VehicleSchedule_V2.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("GeofenceType");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.GeofenceEvent", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Geofence", "Geofence")
                        .WithMany("GeofenceEvents")
                        .HasForeignKey("GeofenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TriggeredGeofenceTrakkerMap_Geofence");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Trakker", "Trakker")
                        .WithMany("GeofenceEvents")
                        .HasForeignKey("TrakkerId")
                        .IsRequired()
                        .HasConstraintName("FK_TriggeredGeofenceTrakkerMap_Trakker");

                    b.Navigation("Geofence");

                    b.Navigation("Trakker");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Group", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Customer", "Customer")
                        .WithMany("Groups")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Group_Customer");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Hardware", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.CustomerAdmin", "CustomerAdmin")
                        .WithMany("Hardwares")
                        .HasForeignKey("CustomerAdminId")
                        .HasConstraintName("FK_Hardware_CustomerAdmin");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Customer", "Customer")
                        .WithMany("Hardwares")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.HardwareConfig", "HardwareConfig")
                        .WithMany("Hardwares")
                        .HasForeignKey("HardwareConfigId")
                        .HasConstraintName("FK_Hardware_HardwareConfig");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.HardwareStatus", "HardwareStatus")
                        .WithMany("Hardwares")
                        .HasForeignKey("HardwareStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Hardware_HardwareStatus");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.HardwareType", "HardwareType")
                        .WithMany("Hardwares")
                        .HasForeignKey("HardwareTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Hardware_HardwareType");

                    b.Navigation("Customer");

                    b.Navigation("CustomerAdmin");

                    b.Navigation("HardwareConfig");

                    b.Navigation("HardwareStatus");

                    b.Navigation("HardwareType");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.HardwareConfig", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Icon", "Icon")
                        .WithMany("HardwareConfigs")
                        .HasForeignKey("IconId")
                        .IsRequired()
                        .HasConstraintName("FK_HardwareConfig_Icon");

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.IsaEvent", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2.VehicleEvent", "VehicleEvent")
                        .WithMany("IsaEvents")
                        .HasForeignKey("VehicleEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleEvent");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Job", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Account", "Account")
                        .WithMany("Jobs")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Customer", "Customer")
                        .WithMany("Jobs")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Job_Customer");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.JobIntervalType", "JobIntervalType")
                        .WithMany("Jobs")
                        .HasForeignKey("JobIntervalTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Job_JobIntervalType");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.JobType", "JobType")
                        .WithMany("Jobs")
                        .HasForeignKey("JobTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Job_JobType");

                    b.Navigation("Account");

                    b.Navigation("Customer");

                    b.Navigation("JobIntervalType");

                    b.Navigation("JobType");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.JobEmailAddress", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Job", "Job")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Mapzone", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Customer", "Customer")
                        .WithMany("Mapzones")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Mapzone_Customer");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.PasswordRecovery", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Account", "Account")
                        .WithMany("PasswordRecoveries")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PasswordRecovery_AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Position", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.GeocodedPosition", "GeocodedPosition")
                        .WithMany("Positions")
                        .HasForeignKey("GeocodedPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GeocodedPosition");

                    b.Navigation("GeocodedPosition");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.RootAccount", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.CustomerAdmin", "CustomerAdmin")
                        .WithMany("RootAccounts")
                        .HasForeignKey("CustomerAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RootAccount_CustomerAdmin");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.RootAccountType", "RootAccountType")
                        .WithMany("RootAccounts")
                        .HasForeignKey("RootAccountTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_RootAccount_RootAccountType");

                    b.Navigation("CustomerAdmin");

                    b.Navigation("RootAccountType");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.RouteSection", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Route", "Route")
                        .WithMany("Sections")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2.EventPosition", "StartReferencePosition")
                        .WithMany()
                        .HasForeignKey("StartReferencePositionId");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2.EventPosition", "StopReferencePosition")
                        .WithMany()
                        .HasForeignKey("StopReferencePositionId");

                    b.Navigation("Route");

                    b.Navigation("StartReferencePosition");

                    b.Navigation("StopReferencePosition");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.SalesPerson", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.CustomerAdmin", "CustomerAdmin")
                        .WithMany("SalesPersons")
                        .HasForeignKey("CustomerAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerAdmin");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.SmsCommand", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.HardwareType", "HardwareType")
                        .WithMany("SmsCommands")
                        .HasForeignKey("HardwareTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_SmsCommand_HardwareType");

                    b.Navigation("HardwareType");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Trakker", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Customer", "Customer")
                        .WithMany("Trakkers")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Trakker_Customer");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Hardware", "Hardware")
                        .WithMany("Trakkers")
                        .HasForeignKey("HardwareId")
                        .HasConstraintName("FK_Trakker_Hardware");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Icon", "Icon")
                        .WithMany("Trakkers")
                        .HasForeignKey("IconId")
                        .HasConstraintName("FK_Trakker_Icon");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.TrakkerEvent", "LatestEvent")
                        .WithMany("TrakkerLatestEvents")
                        .HasForeignKey("LatestEventId")
                        .HasConstraintName("FK_Trakker_LatestEventId");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.TrakkerEvent", "LatestPositionEvent")
                        .WithMany("TrakkerLatestPositionEvents")
                        .HasForeignKey("LatestPositionEventId")
                        .HasConstraintName("FK_Trakker_LatestPositionEventId");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.VehicleSchedule_V2.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId");

                    b.Navigation("Customer");

                    b.Navigation("Hardware");

                    b.Navigation("Icon");

                    b.Navigation("LatestEvent");

                    b.Navigation("LatestPositionEvent");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.TrakkerEvent", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Extras", "Extras")
                        .WithOne()
                        .HasForeignKey("Trakk.WebApi.DatabaseModels.Models.TrakkerEvent", "ExtrasId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Position", "Position")
                        .WithMany("TrakkerEvents")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("FK_TrakkerEvent_Position");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Trakker", "Trakker")
                        .WithMany("TrakkerEvents")
                        .HasForeignKey("TrakkerId")
                        .IsRequired()
                        .HasConstraintName("FK_TrakkerEvent_Trakker");

                    b.Navigation("Extras");

                    b.Navigation("Position");

                    b.Navigation("Trakker");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Vehicle", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Account", "Account")
                        .WithOne()
                        .HasForeignKey("Trakk.WebApi.DatabaseModels.Models.Vehicle", "AccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Customer", "Customer")
                        .WithMany("Vehicles")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Vehicle_Customer");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2.StopEvent", "LatestStopEvent")
                        .WithOne()
                        .HasForeignKey("Trakk.WebApi.DatabaseModels.Models.Vehicle", "LatestStopEventId");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.TrakkerEvent", "LatestTrakkerEvent")
                        .WithMany("Vehicles")
                        .HasForeignKey("LatestTrakkerEventId")
                        .HasConstraintName("FK_Vehicle_TrakkerEvent");

                    b.Navigation("Account");

                    b.Navigation("Customer");

                    b.Navigation("LatestStopEvent");

                    b.Navigation("LatestTrakkerEvent");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2.EventPosition", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.IsaEvent", null)
                        .WithMany("EventPositions")
                        .HasForeignKey("IsaEventId");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2.VehicleEvent", null)
                        .WithMany("Positions")
                        .HasForeignKey("VehicleEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2.VehicleEvent", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2.VehicleEvent", "Previous")
                        .WithOne("Next")
                        .HasForeignKey("Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2.VehicleEvent", "PreviousId");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Route", "Route")
                        .WithOne()
                        .HasForeignKey("Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2.VehicleEvent", "RouteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Vehicle", "Vehicle")
                        .WithMany("VehicleEvents")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Previous");

                    b.Navigation("Route");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.VehicleReminder", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.VehicleReminderType", "VehicleReminderType")
                        .WithMany("VehicleReminders")
                        .HasForeignKey("VehicleReminderTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_VehicleReminder_Vehicle");

                    b.Navigation("VehicleReminderType");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.VehicleSchedule_V2.ScheduleEntry", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.VehicleSchedule_V2.Schedule", "Schedule")
                        .WithMany("Entries")
                        .HasForeignKey("ScheduleId");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("TrakkerContactMap", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Contact", null)
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TrakkerContactMap_Contact");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Trakker", null)
                        .WithMany()
                        .HasForeignKey("TrakkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TrakkerContactMap_Trakker");
                });

            modelBuilder.Entity("TrakkerGroupMap", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TrakkerGroupMap_Group");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Trakker", null)
                        .WithMany()
                        .HasForeignKey("TrakkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TrakkerGroupMap_Trakker");
                });

            modelBuilder.Entity("TrakkerVehicleMap", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Trakker", null)
                        .WithMany()
                        .HasForeignKey("TrakkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TrakkerVehicleMap_Trakker");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TrakkerVehicleMap_Vehicle");
                });

            modelBuilder.Entity("VehicleReminderContactMap", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Contact", null)
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_VehicleReminderContactMap_Contact");

                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.VehicleReminder", null)
                        .WithMany()
                        .HasForeignKey("VehicleReminderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_VehicleReminderContactMap_VehicleReminder");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2.StopEvent", b =>
                {
                    b.HasOne("Trakk.WebApi.DatabaseModels.Models.Position", "StopPosition")
                        .WithMany()
                        .HasForeignKey("StopPositionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("StopPosition");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Account", b =>
                {
                    b.Navigation("AccountConfirmations");

                    b.Navigation("AccountEvents");

                    b.Navigation("AccountGroupMaps");

                    b.Navigation("AccountRightMaps");

                    b.Navigation("AccountTrakkerMaps");

                    b.Navigation("ChangeEmailTickets");

                    b.Navigation("CommunicationEvents");

                    b.Navigation("DriverSetting");

                    b.Navigation("Drivers");

                    b.Navigation("Jobs");

                    b.Navigation("PasswordRecoveries");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.AccountEventType", b =>
                {
                    b.Navigation("AccountEvents");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.AccountRole", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Asset", b =>
                {
                    b.Navigation("AssetEvents");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.AssetEvent", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.CategoryType", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.CommunicationEventType", b =>
                {
                    b.Navigation("CommunicationEvents");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.CongestionTaxV2.CongestionTaxData", b =>
                {
                    b.Navigation("Passages");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Contact", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Customer", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("ArchivedUnitsCustomers");

                    b.Navigation("Contacts");

                    b.Navigation("CustomerServiceMaps");

                    b.Navigation("Drivers");

                    b.Navigation("ExternalAccessMaps");

                    b.Navigation("FuelTypePrices");

                    b.Navigation("Geofences");

                    b.Navigation("Groups");

                    b.Navigation("Hardwares");

                    b.Navigation("Jobs");

                    b.Navigation("Mapzones");

                    b.Navigation("Trakkers");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.CustomerAdmin", b =>
                {
                    b.Navigation("ArchivedUnitsCustomers");

                    b.Navigation("Customers");

                    b.Navigation("Hardwares");

                    b.Navigation("RootAccounts");

                    b.Navigation("SalesPersons");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Driver", b =>
                {
                    b.Navigation("DriverEvents");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.DriverEventType", b =>
                {
                    b.Navigation("DriverEvents");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.GeocodedPosition", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Geofence", b =>
                {
                    b.Navigation("GeofenceEvents");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.GeofenceEvent", b =>
                {
                    b.Navigation("ActiveAlerts");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.GeofenceType", b =>
                {
                    b.Navigation("Geofences");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Group", b =>
                {
                    b.Navigation("AccountGroupMaps");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Hardware", b =>
                {
                    b.Navigation("Trakkers");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.HardwareConfig", b =>
                {
                    b.Navigation("Hardwares");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.HardwareStatus", b =>
                {
                    b.Navigation("Hardwares");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.HardwareType", b =>
                {
                    b.Navigation("Hardwares");

                    b.Navigation("SmsCommands");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Icon", b =>
                {
                    b.Navigation("HardwareConfigs");

                    b.Navigation("Trakkers");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.IsaEvent", b =>
                {
                    b.Navigation("EventPositions");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Job", b =>
                {
                    b.Navigation("EmailAddresses");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.JobIntervalType", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.JobType", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Language", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Position", b =>
                {
                    b.Navigation("AssetEvents");

                    b.Navigation("BaseStations");

                    b.Navigation("TrakkerEvents");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.RightType", b =>
                {
                    b.Navigation("AccountRightMaps");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.RootAccountType", b =>
                {
                    b.Navigation("RootAccounts");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Route", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.SalesPerson", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Service", b =>
                {
                    b.Navigation("CustomerServiceMaps");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Trakker", b =>
                {
                    b.Navigation("AccountTrakkerMaps");

                    b.Navigation("Assets");

                    b.Navigation("GeofenceEvents");

                    b.Navigation("TrakkerEvents");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.TrakkerEvent", b =>
                {
                    b.Navigation("ActiveAlert")
                        .IsRequired();

                    b.Navigation("TrakkerLatestEvents");

                    b.Navigation("TrakkerLatestPositionEvents");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.Vehicle", b =>
                {
                    b.Navigation("VehicleEvents");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2.VehicleEvent", b =>
                {
                    b.Navigation("CongestionTaxPassages");

                    b.Navigation("IsaEvents");

                    b.Navigation("Next")
                        .IsRequired();

                    b.Navigation("Positions");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.VehicleReminderType", b =>
                {
                    b.Navigation("VehicleReminders");
                });

            modelBuilder.Entity("Trakk.WebApi.DatabaseModels.Models.VehicleSchedule_V2.Schedule", b =>
                {
                    b.Navigation("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
