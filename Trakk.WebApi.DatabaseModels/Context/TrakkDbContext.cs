//<auto-generated>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Diagnostics;
using Microsoft.EntityFrameworkCore.Query;
using Microsoft.EntityFrameworkCore.Query.Internal;
using Microsoft.Extensions.Logging;
using System;
using System.Collections;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using MySqlConnector;
using NetTopologySuite.Geometries;
using Pomelo.EntityFrameworkCore.MySql.Infrastructure;
using Trakk.Configuration;
using Trakk.WebApi.DatabaseModels.Configurations;
using Trakk.WebApi.DatabaseModels.Funtions;
using Trakk.WebApi.DatabaseModels.Models.CongestionTaxV2;
using Trakk.WebApi.DatabaseModels.Models.UserEvents;
using Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2;
using Trakk.WebApi.DatabaseModels.Models.VehicleEvent_V2.Configurations;
using Trakk.WebApi.DatabaseModels.Models.VehicleSchedule_V2;
using Trakk.WebApi.DatabaseModels.Seeding;


namespace Trakk.WebApi.DatabaseModels.Models
{

    #region Database context

    public class TrakkDbContext : DbContext
    {
        public TrakkDbContext()
        {
        }

        public TrakkDbContext(DbContextOptions<TrakkDbContext> options)
            : base(options)
        {
        }
        public DbSet<ExternalAccessMap> ExternalAccessMaps { get; set; }
        public DbSet<UserVehicleEvent> UserVehicleEvents { get; set; }
        public DbSet<RouteSection> RouteSections { get; set; }
        public DbSet<UserEvent> UserEvents { get; set; }
        public DbSet<VehicleEvent_V2.VehicleEvent> VehicleEvents { get; set; }
        public DbSet<IsaEvent> IsaEvents { get; set; }
        public DbSet<Schedule> Schedules { get; set; }
        public DbSet<ScheduleEntry> ScheduleEntries { get; set; }
        public DbSet<EventPosition> EventPositions { get; set; }
        public DbSet<CongestionTaxData> CongestionTaxDatas { get; set; }
        public DbSet<Account> Accounts { get; set; } // Account
        public DbSet<AccountConfirmation> AccountConfirmations { get; set; } // AccountConfirmation
        public DbSet<AccountEvent> AccountEvents { get; set; } // AccountEvent
        public DbSet<AccountEventType> AccountEventTypes { get; set; } // AccountEventType
        public DbSet<AccountGroupMap> AccountGroupMaps { get; set; } // AccountGroupMap
        public DbSet<AccountRightMap> AccountRightMaps { get; set; } // AccountRightMap
        public DbSet<AccountRole> AccountRoles { get; set; } // AccountRole
        public DbSet<AccountToken> AccountTokens { get; set; } // AccountToken
        public DbSet<AccountTrakkerMap> AccountTrakkerMaps { get; set; } // AccountTrakkerMap
        public DbSet<ActiveAlert> ActiveAlerts { get; set; } // ActiveAlert
        public DbSet<Agreement> Agreements { get; set; } // Agreement
        public DbSet<ArchivedUnitsCustomer> ArchivedUnitsCustomers { get; set; } // ArchivedUnitsCustomer
        public DbSet<Asset> Assets { get; set; } // Asset
        public DbSet<AssetEvent> AssetEvents { get; set; } // AssetEvent
        public DbSet<BaseStation> BaseStations { get; set; } // BaseStation
        public DbSet<Category> Categories { get; set; } // Category
        public DbSet<CategoryType> CategoryTypes { get; set; } // CategoryType
        public DbSet<ChangeEmailTicket> ChangeEmailTickets { get; set; } // ChangeEmailTicket
        public DbSet<CommunicationEvent> CommunicationEvents { get; set; } // CommunicationEvent
        public DbSet<CommunicationEventType> CommunicationEventTypes { get; set; } // CommunicationEventType
        public DbSet<Contact> Contacts { get; set; } // Contact
        public DbSet<Customer> Customers { get; set; } // Customer
        public DbSet<CustomerFeature> CustomerFeatures { get; set; }
        public DbSet<CustomerAdmin> CustomerAdmins { get; set; } // CustomerAdmin
        public DbSet<CustomerServiceMap> CustomerServiceMaps { get; set; } // CustomerServiceMap
        public DbSet<DbSetting> DbSettings { get; set; } // DBSettings
        public DbSet<Driver> Drivers { get; set; } // Driver
        public DbSet<DriverEvent> DriverEvents { get; set; } // DriverEvent
        public DbSet<DriverEventType> DriverEventTypes { get; set; } // DriverEventType
        public DbSet<DriverSetting> DriverSettings { get; set; } // DriverSettings
        public DbSet<ErrorLog> ErrorLogs { get; set; } // ErrorLog
        public DbSet<JobEmailAddress> EmailAddresses { get; set; } // EmailAddress
        public DbSet<GeocodedPosition> GeocodedPositions { get; set; } // GeocodedPosition
        public DbSet<Geofence> Geofences { get; set; } // Geofence
        public DbSet<GeofenceEvent> GeofenceEvents { get; set; } // GeofenceEvent
        public DbSet<GeofenceType> GeofenceTypes { get; set; } // GeofenceType
        public DbSet<Group> Groups { get; set; } // Group
        public DbSet<Hardware> Hardwares { get; set; } // Hardware
        public DbSet<HardwareConfig> HardwareConfigs { get; set; } // HardwareConfig
        public DbSet<HardwareStatus> HardwareStatus { get; set; } // HardwareStatus
        public DbSet<HardwareType> HardwareTypes { get; set; } // HardwareType
        public DbSet<Icon> Icons { get; set; } // Icon
        public DbSet<Job> Jobs { get; set; } // Job
        public DbSet<JobIntervalType> JobIntervalTypes { get; set; } // JobIntervalType
        public DbSet<JobType> JobTypes { get; set; } // JobType
        public DbSet<Language> Languages { get; set; } // Language
        public DbSet<Mapzone> Mapzones { get; set; } // Mapzone
        public DbSet<PasswordRecovery> PasswordRecoveries { get; set; } // PasswordRecovery
        public DbSet<Position> Positions { get; set; } // Position
        public DbSet<RightType> RightTypes { get; set; } // RightType
        public DbSet<RootAccount> RootAccounts { get; set; } // RootAccount
        public DbSet<RootAccountType> RootAccountTypes { get; set; } // RootAccountType
        public DbSet<Route> Routes { get; set; } // Route
        public DbSet<Service> Services { get; set; } // Service
        public DbSet<SmsCommand> SmsCommands { get; set; } // SmsCommand
        public DbSet<SmsOperator> SmsOperators { get; set; } // SmsOperator
        public DbSet<Trakker> Trakkers { get; set; } // Trakker
        public DbSet<TrakkerEvent> TrakkerEvents { get; set; } // TrakkerEvent
        public DbSet<Vehicle> Vehicles { get; set; } // Vehicle
        public DbSet<VehicleReminder> VehicleReminders { get; set; } // VehicleReminder
        public DbSet<VehicleReminderType> VehicleReminderTypes { get; set; } // VehicleReminderType
        public DbSet<SalesPerson> SalesPerson { get; set; } //SalesPerson
        public DbSet<CustomerFuelPrice> CustomerFuelPrices { get; set; } //CustomerFuelPrices

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            // if (ConfigurationManager.IsSqlDebugLoggingEnabled)
            // {
            //     optionsBuilder.LogTo(msg => NLog.LogManager.GetCurrentClassLogger().Debug(msg), new[] { RelationalEventId.CommandExecuted }, LogLevel.Debug);
            //     optionsBuilder.EnableSensitiveDataLogging();
            // }
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseMySql(
                    ConfigManager.Instance.GetConnectionString("TNTDB5Context"),
                    ServerVersion.AutoDetect(ConfigManager.Instance.GetConnectionString("TNTDB5Context")),
                    x =>
                    {
                        x.SchemaBehavior(MySqlSchemaBehavior.Ignore);
                        x.UseNetTopologySuite();
                    });
                
            }
        }

        public bool IsSqlParameterNull(MySqlParameter param)
        {
            //var sqlValue = param.SqlValue;
            var sqlValue = param.Value;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("utf8mb4_general_ci")
                .HasCharSet("utf8mb4");
            modelBuilder.HasDbFunction(typeof(EF_EX).GetMethod(nameof(EF_EX.TimeDiff), new[] { typeof(DateTime), typeof(DateTime) })).HasName("TIMEDIFF").IsBuiltIn();

            modelBuilder.HasDbFunction(typeof(EF_EX).GetMethod(nameof(EF_EX.TimeToSec), new[] { typeof(TimeSpan) })).HasName("TIME_TO_SEC").IsBuiltIn();
            modelBuilder.HasDbFunction(typeof(EF_EX).GetMethod(nameof(EF_EX.ConvertTz), new[] { typeof(DateTime), typeof(string), typeof(string) }))
                .HasName("convert_tz");
            modelBuilder.HasDbFunction(typeof(EF_EX).GetMethod(nameof(EF_EX.CreatePoint), new[] {typeof(double), typeof(double) }))
                .HasName("Point").IsBuiltIn();
            modelBuilder.HasDbFunction(typeof(EF_EX).GetMethod(nameof(EF_EX.SRID), new[] {typeof(Point), typeof(int) }))
                .HasName("ST_SRID").IsBuiltIn();
            //   modelBuilder.HasSequence<int>("UnitId_Counter").StartsAt(1).IncrementsBy(1).IsCyclic(false);
            modelBuilder.ApplyConfiguration(new ExtrasConfiguration());
            modelBuilder.ApplyConfiguration(new ExternalAccessMapConfiguration());
            modelBuilder.ApplyConfiguration(new CustomerFuelPricesConfiguration());
            modelBuilder.ApplyConfiguration(new UserEventConfiguration());
            modelBuilder.ApplyConfiguration(new UpdatePropertiesUserEventConfiguration());
            modelBuilder.ApplyConfiguration(new RouteSectionConfiguration());


            modelBuilder.ApplyConfiguration(new ScheduleConfiguration());
            modelBuilder.ApplyConfiguration(new ScheduleEntryConfiguration());
            modelBuilder.ApplyConfiguration(new CongestionTaxDataConfiguration());


            modelBuilder.ApplyConfiguration(new AccountConfiguration());
            modelBuilder.ApplyConfiguration(new AccountConfirmationConfiguration());
            modelBuilder.ApplyConfiguration(new AccountEventConfiguration());
            modelBuilder.ApplyConfiguration(new AccountEventTypeConfiguration());
            modelBuilder.ApplyConfiguration(new AccountGroupMapConfiguration());
            modelBuilder.ApplyConfiguration(new AccountRightMapConfiguration());
            modelBuilder.ApplyConfiguration(new AccountRoleConfiguration());
            modelBuilder.ApplyConfiguration(new AccountTokenConfiguration());
            modelBuilder.ApplyConfiguration(new AccountTrakkerMapConfiguration());
            modelBuilder.ApplyConfiguration(new ActiveAlertConfiguration());
            modelBuilder.ApplyConfiguration(new AgreementConfiguration());
            modelBuilder.ApplyConfiguration(new ArchivedUnitsCustomerConfiguration());
            modelBuilder.ApplyConfiguration(new AssetConfiguration());
            modelBuilder.ApplyConfiguration(new AssetEventConfiguration());
            modelBuilder.ApplyConfiguration(new BaseStationConfiguration());
            modelBuilder.ApplyConfiguration(new CategoryConfiguration());
            modelBuilder.ApplyConfiguration(new CategoryTypeConfiguration());
            modelBuilder.ApplyConfiguration(new ChangeEmailTicketConfiguration());
            modelBuilder.ApplyConfiguration(new CommunicationEventConfiguration());
            modelBuilder.ApplyConfiguration(new CommunicationEventTypeConfiguration());
            modelBuilder.ApplyConfiguration(new ContactConfiguration());
            modelBuilder.ApplyConfiguration(new CustomerConfiguration());
            modelBuilder.ApplyConfiguration(new CustomerFeatureConfiguration());
            modelBuilder.ApplyConfiguration(new CustomerAdminConfiguration());
            modelBuilder.ApplyConfiguration(new CustomerServiceMapConfiguration());
            modelBuilder.ApplyConfiguration(new DbSettingConfiguration());
            modelBuilder.ApplyConfiguration(new DriverConfiguration());
            modelBuilder.ApplyConfiguration(new DriverEventConfiguration());
            modelBuilder.ApplyConfiguration(new DriverEventTypeConfiguration());
            modelBuilder.ApplyConfiguration(new DriverSettingConfiguration());
            modelBuilder.ApplyConfiguration(new ErrorLogConfiguration());
            modelBuilder.ApplyConfiguration(new EventPositionConfiguration());
            modelBuilder.ApplyConfiguration(new GeocodedPositionConfiguration());
            modelBuilder.ApplyConfiguration(new GeofenceConfiguration());
            modelBuilder.ApplyConfiguration(new GeofenceEventConfiguration());
            modelBuilder.ApplyConfiguration(new GeofenceTypeConfiguration());
            modelBuilder.ApplyConfiguration(new GroupConfiguration());
            modelBuilder.ApplyConfiguration(new HardwareConfiguration());
            modelBuilder.ApplyConfiguration(new HardwareConfigConfiguration());
            modelBuilder.ApplyConfiguration(new HardwareStatusConfiguration());
            modelBuilder.ApplyConfiguration(new HardwareTypeConfiguration());
            modelBuilder.ApplyConfiguration(new IconConfiguration());
            modelBuilder.ApplyConfiguration(new IsaEventConfiguration());
            modelBuilder.ApplyConfiguration(new JobConfiguration());
            modelBuilder.ApplyConfiguration(new JobIntervalTypeConfiguration());
            modelBuilder.ApplyConfiguration(new JobTypeConfiguration());
            modelBuilder.ApplyConfiguration(new LanguageConfiguration());
            modelBuilder.ApplyConfiguration(new MapzoneConfiguration());
            modelBuilder.ApplyConfiguration(new PasswordRecoveryConfiguration());
            modelBuilder.ApplyConfiguration(new PositionConfiguration());
            modelBuilder.ApplyConfiguration(new RightTypeConfiguration());
            modelBuilder.ApplyConfiguration(new RootAccountConfiguration());
            modelBuilder.ApplyConfiguration(new RootAccountTypeConfiguration());
            modelBuilder.ApplyConfiguration(new RouteConfiguration());
            modelBuilder.ApplyConfiguration(new ServiceConfiguration());
            modelBuilder.ApplyConfiguration(new SmsCommandConfiguration());
            modelBuilder.ApplyConfiguration(new SmsOperatorConfiguration());
            modelBuilder.ApplyConfiguration(new TrakkerConfiguration());
            modelBuilder.ApplyConfiguration(new TrakkerEventConfiguration());
            modelBuilder.ApplyConfiguration(new VehicleConfiguration());
            modelBuilder.ApplyConfiguration(new VehicleEventV2Configuration());
            modelBuilder.ApplyConfiguration(new StopEventConfiguration());
            modelBuilder.ApplyConfiguration(new TripEventConfiguration());
            modelBuilder.ApplyConfiguration(new VehicleReminderConfiguration());
            modelBuilder.ApplyConfiguration(new VehicleReminderTypeConfiguration());
         //   modelBuilder.ApplyConfiguration(new VehicleScheduleConfiguration());
            modelBuilder.ApplyConfiguration(new SalesPersonConfiguration());
            base.OnModelCreating(modelBuilder);
        }


        // Stored Procedures
        public int NLogInsertErrorLogEntry(string http, string message, string stackTrace)
        {
            var httpParam = new MySqlParameter { ParameterName = "@http", MySqlDbType = MySqlDbType.VarChar, Direction = ParameterDirection.Input, Value = http, Size = -1 };
            if (httpParam.Value == null)
                httpParam.Value = DBNull.Value;

            var messageParam = new MySqlParameter { ParameterName = "@message", MySqlDbType = MySqlDbType.VarChar, Direction = ParameterDirection.Input, Value = message, Size = -1 };
            if (messageParam.Value == null)
                messageParam.Value = DBNull.Value;

            var stackTraceParam = new MySqlParameter { ParameterName = "@stackTrace", MySqlDbType = MySqlDbType.VarChar, Direction = ParameterDirection.Input, Value = stackTrace, Size = -1 };
            if (stackTraceParam.Value == null)
                stackTraceParam.Value = DBNull.Value;

            var procResultParam = new MySqlParameter { ParameterName = "@procResult", MySqlDbType = MySqlDbType.Int32, Direction = ParameterDirection.Output };

            Database.ExecuteSqlRaw("EXEC @procResult = [dbo].[NLog_InsertErrorLogEntry] @http, @message, @stackTrace", httpParam, messageParam, stackTraceParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // NLogInsertErrorLogEntryAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion
}
// </auto-generated>
